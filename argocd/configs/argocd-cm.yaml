# ArgoCD Configuration ConfigMap
# This configures ArgoCD server settings, authentication, and repository access

apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  # ArgoCD server URL
  url: "https://argocd.local"
  
  # Application instance label key
  application.instanceLabelKey: argocd.argoproj.io/instance
  
  # Server configuration
  server.rbac.log.enforce.enable: "true"
  server.rbac.log.enforce.level: "info"
  
  # Repository configuration
  repositories: |
    - type: git
      url: https://github.com/your-org/k3s-cluster-management
      name: cluster-management
      project: default
  
  # OIDC configuration for authentication
  oidc.config: |
    name: Local OIDC
    issuer: https://argocd.local/api/dex
    clientId: argocd
    clientSecret: $oidc.clientSecret
    requestedScopes: ["openid", "profile", "email", "groups"]
    requestedIDTokenClaims: {"groups": {"essential": true}}
  
  # Dex configuration for local authentication
  dex.config: |
    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $github.clientId
        clientSecret: $github.clientSecret
        orgs:
        - name: your-org
          teams:
          - admin
          - developers
    
    # Local users configuration
    staticClients:
    - id: argocd
      name: ArgoCD
      redirectURIs:
      - https://argocd.local/auth/callback
      secretEnv: OIDC_CLIENT_SECRET
    
    # Enable password database for local users
    enablePasswordDB: true
    staticPasswords:
    - email: admin@local
      hash: $2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W
      username: admin
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
  
  # Admin user configuration
  accounts.admin: apiKey, login
  accounts.admin.enabled: "true"
  
  # Additional user accounts
  accounts.developer: login
  accounts.developer.enabled: "true"
  
  accounts.readonly: login
  accounts.readonly.enabled: "true"
  
  # Disable anonymous access
  users.anonymous.enabled: "false"
  
  # Resource customizations
  resource.customizations: |
    networking.k8s.io/Ingress:
      health.lua: |
        hs = {}
        hs.status = "Healthy"
        return hs